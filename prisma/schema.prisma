generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               String    @id @default(cuid())
    name             String    @unique
    email            String    @unique
    password         String
    imageId          String?
    role             UserRole  @default(USER)
    bio              String?
    followers        BigInt    @default(0)
    following        BigInt    @default(0)
    posts            BigInt    @default(0)
    emailVerified    DateTime?
    followPermission Boolean   @default(false)
    createdAt        DateTime  @default(now())
    updatedAt        DateTime

    accounts            Account[]
    sessions            Session[]
    Post                Post[]
    View                View[]
    Like                Like[]
    Comment             Comment[]
    SavedPost           SavedPost[]
    Follower            Follow[]            @relation("FollowedByUser")
    Following           Follow[]            @relation("FollowedToUser")
    SharedByUser        Share[]             @relation("SharedByUser")
    SharedToUser        Share[]             @relation("SharedToUser")
    FollowRequestByUser FollowRequest[]     @relation("FollowRequestByUser")
    FollowRequestToUser FollowRequest[]     @relation("FollowRequestToUser")
    ReportedByUser      UserReport[]        @relation("ReportedByUser")
    ReportedToUser      UserReport[]        @relation("ReportedToUser")
    PostReort           PostReort[]
    CommentReport       CommentReport[]
    VerificationToken   VerificationToken[]
    image               File?               @relation(fields: [imageId], references: [id])
    CommenLike          CommenLike[]
    SentMessages        Message[]           @relation("SentMessages")
    RecievedMessages    Message[]           @relation("RecievedMessages")

    @@index([name])
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Post {
    id         String    @id @default(cuid())
    files      File[]
    caption    String?
    hashtags   Hashtag[] @relation("PostHashtage")
    likes      BigInt    @default(0)
    shares     BigInt    @default(0)
    comments   BigInt    @default(0)
    views      BigInt    @default(0)
    type       PostType
    postedById String
    postedAt   DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    postedBy  User        @relation(fields: [postedById], references: [id], onDelete: Cascade)
    View      View[]
    Like      Like[]
    Comment   Comment[]
    Share     Share[]
    PostReort PostReort[]
    SavedPost SavedPost[]

    @@index([postedById])
}

model Message {
    id               String    @id @default(cuid())
    content          String?
    sentByUserId     String
    recievedByUserId String
    readAt           DateTime?
    deletedAt        DateTime?
    sentAt           DateTime  @default(now())
    updatedAt        DateTime

    SentByUser     User @relation("SentMessages", fields: [sentByUserId], references: [id], onDelete: Cascade)
    RecievedByUser User @relation("RecievedMessages", fields: [recievedByUserId], references: [id], onDelete: Cascade)
}

model File {
    id        String   @id
    path      String
    fullPath  String
    postId    String?
    publicUrl String?
    createdAt DateTime @default(now())

    post Post?  @relation(fields: [postId], references: [id])
    user User[]
}

model VerificationToken {
    token   String   @unique
    expires DateTime
    userId  String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([token])
}

model View {
    id         String   @id @default(cuid())
    postId     String
    viewedById String
    viewedAt   DateTime @default(now())

    post     Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    viewedBy User @relation(fields: [viewedById], references: [id], onDelete: Cascade)

    @@index([postId, viewedById])
}

model Like {
    id        String   @id @default(cuid())
    postId    String
    likedById String
    likedAt   DateTime @default(now())

    post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    likedBy User @relation(fields: [likedById], references: [id], onDelete: Cascade)

    @@unique([likedById, postId])
}

model Share {
    id         String   @id @default(cuid())
    postId     String
    sharedById String
    sharedToId String
    sharedAt   DateTime @default(now())

    post     Post @relation(fields: [postId], references: [id])
    sharedBy User @relation("SharedByUser", fields: [sharedById], references: [id], onDelete: Cascade)
    sharedTo User @relation("SharedToUser", fields: [sharedToId], references: [id], onDelete: Cascade)

    @@unique([sharedById, sharedToId])
    @@index([postId])
}

model Comment {
    id           String   @id @default(cuid())
    content      String
    parentId     String?
    postId       String
    commetedById String
    likes        BigInt   @default(0)
    commentedAt  DateTime @default(now())
    updatedAt    DateTime

    parent      Comment? @relation("CommentToParent", fields: [parentId], references: [id], onDelete: Cascade)
    post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    commentedBy User     @relation(fields: [commetedById], references: [id], onDelete: Cascade)

    replies       Comment[]       @relation("CommentToParent")
    CommentReport CommentReport[]
    CommenLike    CommenLike[]
}

model CommenLike {
    id        String   @id @default(cuid())
    likedById String
    commentId String
    createdAt DateTime @default(now())

    LikedByUser User    @relation(fields: [likedById], references: [id], onDelete: Cascade)
    Comment     Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique([likedById, commentId])
}

model SavedPost {
    id        String   @id @default(cuid())
    postId    String
    savedById String
    savedAt   DateTime @default(now())

    post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    savedBy User @relation(fields: [savedById], references: [id], onDelete: Cascade)

    @@unique([savedById, postId])
}

model Follow {
    id          String @id @default(cuid())
    followerId  String
    followingId String

    followerUser  User @relation("FollowedByUser", fields: [followerId], references: [id], onDelete: Cascade)
    followingUser User @relation("FollowedToUser", fields: [followingId], references: [id], onDelete: Cascade)

    @@unique([followerId, followingId])
    @@index([followerId])
    @@index([followingId])
}

model FollowRequest {
    id            String   @id @default(cuid())
    requestedById String
    requestedToId String
    requestedAt   DateTime @default(now())

    requestedBy User @relation("FollowRequestByUser", fields: [requestedById], references: [id], onDelete: Cascade)
    requestedTo User @relation("FollowRequestToUser", fields: [requestedToId], references: [id], onDelete: Cascade)

    @@unique([requestedById, requestedToId])
    @@index([requestedById])
    @@index([requestedToId])
}

model UserReport {
    id           String     @id @default(cuid())
    reportedById String?
    reportedToId String
    reportType   ReportType
    description  String?
    reportedAt   DateTime   @default(now())

    reportedBy User? @relation("ReportedByUser", fields: [reportedById], references: [id], onDelete: SetNull)
    reportedTo User  @relation("ReportedToUser", fields: [reportedToId], references: [id], onDelete: Cascade)

    @@unique([reportedById, reportedToId])
    @@index([reportedToId])
}

model PostReort {
    id           String     @id @default(cuid())
    reportedById String?
    reportedToId String
    reportType   ReportType
    description  String?
    reportedAt   DateTime   @default(now())

    reportedBy User? @relation(fields: [reportedById], references: [id], onDelete: SetNull)
    reportedTo Post  @relation(fields: [reportedToId], references: [id], onDelete: Cascade)

    @@unique([reportedById, reportedToId])
    @@index([reportedToId])
}

model CommentReport {
    id           String     @id @default(cuid())
    reportedById String?
    reportedToId String
    reportType   ReportType
    description  String?
    reportedAt   DateTime   @default(now())

    reportedBy User?   @relation(fields: [reportedById], references: [id], onDelete: SetNull)
    reportedTo Comment @relation(fields: [reportedToId], references: [id])

    @@unique([reportedById, reportedToId])
    @@index([reportedToId])
}

model Hashtag {
    id        String   @id @default(cuid())
    tag       String
    used      BigInt   @default(0)
    createdAt DateTime @default(now())

    posts Post[] @relation("PostHashtage")

    @@unique([tag])
    @@index([tag])
}

// enums
enum UserRole {
    USER
    ADMIN
    BANNED
}

enum UserStatus {
    ONLINE
    OFFLINE
}

enum PostType {
    ALL
    FOLLOWER
    ME
}

enum ReportType {
    HARASSMENT
    IMPERSONATION
    SPAM
    OFFENSIVE_CONTENT
    FRAUD
    HATE_SPEECH
    INAPPROPRIATE_PROFILE
    MISINFORMATION
    VIOLENCE_THREATS
    COPYRIGHT_VIOLATION
    GRAPHIC_CONTENT
    OTHER
}
